name: CI

on:
  workflow_dispatch:

jobs:
  changes:
    name: Changes
    permissions:
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    outputs:
      base: ${{ steps.filter.outputs.base }}
      go: ${{ steps.filter.outputs.go }}
      helm: ${{ steps.filter.outputs.helm}}
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2

      - uses: dorny/paths-filter@b2feaf19c27470162a626bd6fa8438ae5b263721 # v2.10.2
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            base:
              - 'NGINX_BASE'
            go:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - 'rootfs/**/*'
              - 'TAG'
              - 'test/e2e/**/*'
            helm:
              - 'charts/ingress-nginx/Chart.yaml'
              - 'charts/ingress-nginx/**/*'

  base:
    name: Build base
    runs-on: self-hosted-8cpu
    needs:
      - changes
    # TODO false is set for debug. Revert to true!
    steps:
      - name: Checkout
        if: needs.changes.outputs.base == 'true'
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        if: needs.changes.outputs.base == 'true'
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          use: false

      - name: Build base
        if: needs.changes.outputs.base == 'true'
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.GITLAB_DEPLOY_KEY }}" | tr -d '\r' | ssh-add -
          make -C images/nginx OUTPUT=--load build
          docker save -o base.tar $(cat NGINX_BASE)

      - name: Cache image
        if: needs.changes.outputs.base == 'true'
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: base.tar
          path: base.tar

  controller:
    name: Build controller
    runs-on: self-hosted-4cpu
    needs:
      - changes
      - base
#    if: |
#      always() &&
#      (needs.changes.outputs.go == 'true' || needs.changes.outputs.base == 'true') &&
#      (needs.base.result == 'success' || needs.base.result == 'skipped')
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load cache
        # TODO false is set for debug. Revert to true!
        if: needs.changes.outputs.base == 'true'
        uses: actions/download-artifact@v3
        with:
          name: base.tar

      - name: Load base image
        # TODO false is set for debug. Revert to true!
        if: needs.changes.outputs.base == 'true'
        run: docker load -i base.tar

#      - name: Set up Go 1.19.1
#        id: go
#        uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f # v3.2.0
#        with:
#          go-version: '1.19.1'

      - name: Build images
        env:
          ARCH: amd64
          REGISTRY: wallarm
          TAG: 1.0.0-dev
          USER: runner
        run: |
          echo "Building controller images"
          make clean-image build image
          echo "Building E2E image"
          make -C test/e2e-image image image-chroot
          docker images
          docker save -o controller.tar \
          wallarm/ingress-controller:1.0.0-dev \
          wallarm/ingress-controller-chroot:1.0.0-dev
          nginx-ingress-controller:e2e

      - name: Cache images
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: controller.tar
          path: controller.tar

  smoke:
    name: Smoke
    runs-on: self-hosted-1cpu
    continue-on-error: true
    needs:
      - controller
      - changes
    if: needs.changes.outputs.go == 'true'
    strategy:
      fail-fast: false
      matrix:
        k8s: [v1.23.10, v1.24.4, v1.25.0]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load cache
        uses: actions/download-artifact@v3
        with:
          name: controller.tar

      - name: Load images
        run: docker load -i controller.tar

      - name: Install helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.8.0'

      - name: Create cluster
        uses: helm/kind-action@v1.3.0
        with:
          version: v0.15.0
          cluster_name: kind
          node_image: kindest/node:${{ matrix.k8s }}

      - name: Run smoke tests
        env:
          # TODO remove SMOKE_IMAGE_TAG after testing! It is 'latest' by default
          SMOKE_IMAGE_TAG: 0.0.9-rc1664274176
          ARCH: amd64
          KIND_CLUSTER_NAME: kind
          SKIP_CLUSTER_CREATION: true
          SKIP_IMAGE_CREATION: true
          WALLARM_API_TOKEN: ${{ secrets.WALLARM_API_TOKEN }}
          USER_UUID: ${{ secrets.WALLARM_API_USER_UUID }}
          USER_SECRET: ${{ secrets.WALLARM_API_USER_SECRET }}
          CLIENT_ID: 4
        run: |
          echo ${{ secrets.GITLAB_TOKEN_SECRET }} | docker login -u ${{ secrets.GITLAB_TOKEN_NAME }} --password-stdin dkr.wallarm.com
          kind get kubeconfig > $HOME/.kube/kind-config-kind
          export KUBECONFIG=$HOME/.kube/kind-config-kind
          make kind-smoke-test

  helm:
    name: Helm
    runs-on: self-hosted-1cpu
    needs:
      - controller
      - changes
    if: needs.changes.outputs.helm == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load cache
        uses: actions/download-artifact@v3
        with:
          name: controller.tar

      - name: Load images
        run: docker load -i controller.tar

      - name: Install helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.8.0'

      - name: Create cluster
        uses: helm/kind-action@v1.3.0
        with:
          version: v0.15.0
          cluster_name: kind
          node_image: kindest/node:v1.24.4

      - name: Run E2E chart tests
        env:
          ARCH: amd64
          KIND_CLUSTER_NAME: kind
          SKIP_CLUSTER_CREATION: true
          SKIP_IMAGE_CREATION: true
          WALLARM_API_TOKEN: ${{ secrets.WALLARM_API_TOKEN }}
        run: |
          kind get kubeconfig > $HOME/.kube/kind-config-kind
          export KUBECONFIG=$HOME/.kube/kind-config-kind
          make kind-e2e-chart-tests


  e2e:
    name: E2E - Wallarm disabled
    runs-on: self-hosted-4cpu
    needs:
      - controller
      - changes
    if: needs.changes.outputs.go == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load cache
        uses: actions/download-artifact@v3
        with:
          name: controller.tar

      - name: Load images
        run: docker load -i controller.tar

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.8.0'

      - name: Create cluster
        uses: helm/kind-action@v1.3.0
        with:
          verbosity: "0"
          wait: "240s"
          version: v0.15.0
          node_image: kindest/node:v1.24.4
          config: test/e2e/kind.yaml
          cluster_name: kind

      - name: Run e2e tests
        env:
          KIND_CLUSTER_NAME: kind
          SKIP_CLUSTER_CREATION: true
          SKIP_IMAGE_CREATION: true
          ARCH: amd64
        run: |
          kind get kubeconfig > $HOME/.kube/kind-config-kind
          make E2E_NODES=10 kind-e2e-test


  e2e-wallarm-enabled:
    name: E2E - Wallarm enabled
    runs-on: self-hosted-4cpu
    needs:
      - changes
      - controller
    if: needs.changes.outputs.go == 'true'
    strategy:
      matrix:
        k8s: [ v1.23.10, v1.24.4, v1.25.0 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load cache
        uses: actions/download-artifact@v3
        with:
          name: controller.tar

      - name: Load images
        run: docker load -i controller.tar

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.8.0'

      - name: Create cluster ${{ matrix.k8s }}
        uses: helm/kind-action@v1.3.0
        with:
          verbosity: "0"
          wait: "240s"
          version: v0.15.0
          node_image: kindest/node:${{ matrix.k8s }}
          config: test/e2e/kind.yaml
          cluster_name: kind

      - name: Run e2e tests
        env:
          ARCH: amd64
          KIND_CLUSTER_NAME: kind
          SKIP_CLUSTER_CREATION: true
          SKIP_IMAGE_CREATION: true
          WALLARM_ENABLED: true
          WALLARM_API_TOKEN: ${{ secrets.WALLARM_API_TOKEN }}
        run: |
          kind get kubeconfig > $HOME/.kube/kind-config-kind
          make E2E_NODES=10 kind-e2e-test
