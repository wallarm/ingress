name: CI

on:
  pull_request:
    branches: ['main']
    types: ['opened', 'reopened', 'synchronize']
  workflow_dispatch:

permissions:
  contents: read

jobs:
  changes:
    name: Changes
    permissions:
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    outputs:
      base: ${{ steps.filter.outputs.base }}
      go: ${{ steps.filter.outputs.go }}
      helm: ${{ steps.filter.outputs.helm}}
    steps:
      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.0.2

      - uses: dorny/paths-filter@b2feaf19c27470162a626bd6fa8438ae5b263721 # v2.10.2
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            base:
              - 'NGINX_BASE'
            go:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - 'rootfs/**/*'
              - 'TAG'
              - 'test/e2e/**/*'
            helm:
              - 'charts/ingress-nginx/Chart.yaml'
              - 'charts/ingress-nginx/**/*'

  build:
    name: Build images
    runs-on: self-hosted-8cpu
    if: |
      (needs.changes.outputs.base == 'true' || needs.changes.outputs.go == 'true' || needs.changes.outputs.helm == 'true')
    needs:
      - changes
    steps:
      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.0.2

      - name: Setup Docker Buildx
        if: needs.changes.outputs.base == 'true'
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2.0.0
        with:
          version: latest
          use: false

      - name: Build base image
        if: needs.changes.outputs.base == 'true'
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.GITLAB_DEPLOY_KEY }}" | tr -d '\r' | ssh-add -
          make -C images/nginx OUTPUT=--load build
          docker save -o base.tar $(cat NGINX_BASE)

      - name: Build controller images
        env:
          ARCH: amd64
          REGISTRY: wallarm
          TAG: 1.0.0-dev
          USER: runner
        run: |
          echo "Building controller images ..."
          make clean-image build image image-chroot       
          echo "Building E2E image ..."
          make -C test/e2e-image image          
          docker save -o controller.tar \
          wallarm/ingress-controller:1.0.0-dev \
          wallarm/ingress-controller-chroot:1.0.0-dev \
          nginx-ingress-controller:e2e

      - name: Cache controller images
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8
        with:
          retention-days: 1
          name: controller.tar
          path: controller.tar

      - name: Cache base image
        if: needs.changes.outputs.base == 'true'
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8
        with:
          retention-days: 1
          name: base.tar
          path: base.tar

  smoke:
    name: Smoke
    runs-on: self-hosted-1cpu
    needs:
      - build
      - changes
    if: needs.changes.outputs.go == 'true'
    strategy:
      matrix:
        k8s: [v1.22.15, v1.23.12, v1.24.6, v1.25.2]
    steps:
      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.0.2

      - name: Load cache
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
        with:
          name: controller.tar

      - name: Load images
        run: docker load -i controller.tar

      - name: Install helm
        uses: azure/setup-helm@b5b231a831f96336bbfeccc1329990f0005c5bb1
        with:
          version: 'v3.8.0'

      - name: Create cluster
        uses: helm/kind-action@9e8295d178de23cbfbd8fa16cf844eec1d773a07
        with:
          version: v0.15.0
          cluster_name: kind
          node_image: kindest/node:${{ matrix.k8s }}

      - name: Run smoke tests
        env:
          ARCH: amd64
          KIND_CLUSTER_NAME: kind
          SKIP_CLUSTER_CREATION: true
          SKIP_IMAGE_CREATION: true
          WALLARM_API_TOKEN: ${{ secrets.WALLARM_API_TOKEN }}
          USER_UUID: ${{ secrets.WALLARM_API_USER_UUID }}
          USER_SECRET: ${{ secrets.WALLARM_API_USER_SECRET }}
          CLIENT_ID: 4
        run: |
          echo ${{ secrets.GITLAB_TOKEN_SECRET }} | docker login -u ${{ secrets.GITLAB_TOKEN_NAME }} --password-stdin dkr.wallarm.com
          kind get kubeconfig > $HOME/.kube/kind-config-kind
          export KUBECONFIG=$HOME/.kube/kind-config-kind
          make kind-smoke-test

  helm-install:
    name: Helm install
    runs-on: self-hosted-1cpu
    needs:
      - build
      - changes
    if: needs.changes.outputs.helm == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.0.2

      - name: Load cache
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
        with:
          name: controller.tar

      - name: Load images
        run: docker load -i controller.tar

      - name: Install helm
        uses: azure/setup-helm@b5b231a831f96336bbfeccc1329990f0005c5bb1
        with:
          version: 'v3.8.0'

      - name: Create cluster
        uses: helm/kind-action@9e8295d178de23cbfbd8fa16cf844eec1d773a07
        with:
          version: v0.15.0
          cluster_name: kind
          node_image: kindest/node:v1.24.4

      - name: Run E2E chart tests
        env:
          ARCH: amd64
          KIND_CLUSTER_NAME: kind
          SKIP_CLUSTER_CREATION: true
          SKIP_IMAGE_CREATION: true
          WALLARM_API_TOKEN: ${{ secrets.WALLARM_API_TOKEN }}
        run: |
          kind get kubeconfig > $HOME/.kube/kind-config-kind
          export KUBECONFIG=$HOME/.kube/kind-config-kind
          make kind-e2e-chart-tests


  e2e:
    name: E2E
    runs-on: self-hosted-2cpu
    needs:
      - build
      - changes
    if: needs.changes.outputs.go == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.0.2

      - name: Load base build cache
        if: needs.changes.outputs.base == 'true'
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
        with:
          name: base.tar

      - name: Load base image
        if: needs.changes.outputs.base == 'true'
        run: docker load -i base.tar

      - name: Load controller build cache
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
        with:
          name: controller.tar

      - name: Load controller images
        run: docker load -i controller.tar

      - name: Install Helm
        uses: azure/setup-helm@b5b231a831f96336bbfeccc1329990f0005c5bb1
        with:
          version: 'v3.8.0'

      - name: Create cluster
        uses: helm/kind-action@9e8295d178de23cbfbd8fa16cf844eec1d773a07
        with:
          verbosity: "0"
          wait: "240s"
          version: v0.15.0
          node_image: kindest/node:v1.24.6
          config: test/e2e/kind.yaml
          cluster_name: kind

      - name: Copying base image to cluster
        if: needs.changes.outputs.base == 'true'
        run: kind load docker-image --name=kind $(cat NGINX_BASE)

      - name: Run e2e tests
        env:
          KIND_CLUSTER_NAME: kind
          SKIP_CLUSTER_CREATION: true
          SKIP_IMAGE_CREATION: true
          ARCH: amd64
        run: |
          kind get kubeconfig > $HOME/.kube/kind-config-kind
          make E2E_NODES=10 kind-e2e-test


  e2e-wallarm:
    name: E2E - Wallarm
    runs-on: self-hosted-4cpu
    needs:
      - changes
      - build
    if: needs.changes.outputs.go == 'true'
    strategy:
      matrix:
        k8s: [v1.22.15, v1.23.12, v1.24.6, v1.25.2]
    steps:
      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.0.2

      - name: Load base build cache
        if: needs.changes.outputs.base == 'true'
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
        with:
          name: base.tar

      - name: Load base image
        if: needs.changes.outputs.base == 'true'
        run: docker load -i base.tar

      - name: Load controller build cache
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
        with:
          name: controller.tar

      - name: Load controller images
        run: docker load -i controller.tar

      - name: Install Helm
        uses: azure/setup-helm@b5b231a831f96336bbfeccc1329990f0005c5bb1
        with:
          version: 'v3.8.0'

      - name: Create cluster ${{ matrix.k8s }}
        uses: helm/kind-action@9e8295d178de23cbfbd8fa16cf844eec1d773a07
        with:
          verbosity: "0"
          wait: "240s"
          version: v0.15.0
          node_image: kindest/node:${{ matrix.k8s }}
          config: test/e2e/kind.yaml
          cluster_name: kind

      - name: Copying base image to cluster
        if: needs.changes.outputs.base == 'true'
        run: kind load docker-image --name=kind $(cat NGINX_BASE)

      - name: Run e2e tests
        env:
          ARCH: amd64
          KIND_CLUSTER_NAME: kind
          SKIP_CLUSTER_CREATION: true
          SKIP_IMAGE_CREATION: true
          WALLARM_ENABLED: true
          WALLARM_API_TOKEN: ${{ secrets.WALLARM_API_TOKEN }}
        run: |
          kind get kubeconfig > $HOME/.kube/kind-config-kind
          make E2E_NODES=10 kind-e2e-test

  scan:
    name: Scan images
    runs-on: self-hosted-1cpu
    continue-on-error: true
    needs:
      - changes
      - build
    if: |
      (needs.changes.outputs.base == 'true' || needs.changes.outputs.go == 'true')
    steps:
      - name: Load controller build cache
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
        with:
          name: controller.tar

      - name: Load controller images
        run: docker load -i controller.tar

      - name: Scan controller image
        uses: anchore/scan-action@d5aa5b6cb9414b0c7771438046ff5bcfa2854ed7
        with:
          image: "wallarm/ingress-controller:1.0.0-dev"
          fail-build: true
          output-format: 'table'
          severity-cutoff: 'critical'